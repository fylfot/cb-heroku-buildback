#!/bin/bash

##
# usage: bin/compile <build-dir> <cache-dir> <env-dir>


# export variables in <env-dir>
# see https://devcenter.heroku.com/articles/buildpack-api#bin-compile

env_dir=$3
if [ -d "$env_dir" ]; then
  for e in $(ls $env_dir); do
    echo "$e" | grep -E '^(BINARY_RELEASES|BUCKET|AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY|DISABLE_GIT_CHECKOUT|ERTS_VSN|REL_NAME|REL_VSN)$' &&
    export "$e=$(cat $env_dir/$e)"
    :
  done
fi

# regular buildpack business

set -e
bpdir=$(cd $(dirname $(dirname $0)); pwd)
mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
test -z ${build} && exit
cache=$(cd "$2/" && pwd)
test -z ${cache} && exit

OTP_TARBALL_URL="https://svn.marco-gatti.com/heroku/${STACK}/OTP-20.1"
ERLROOT=${build}/otp
PROFILE=${HOME}/.profile.d

echo "-----> Using Erlang/$ver"

(
    set -e

    # Already cached?
    test -f ${cache}/${tarball} && exit

    rm -rf ${cache}/* # be sure not to build up cruft
    cd ${cache}
    echo "-------> Fetching Erlang/$ver"
    curl -sSO ${OTP_TARBALL_URL}

    echo "-------> Finished fetching tarball, checking"
    file ${tarball} | grep -ql gzip

)

echo "-------> Unpacking Erlang/OTP $ver"
mkdir -p ${ERLROOT}
tar zxf ${cache}/${tarball} -C ${ERLROOT} ${strip}
echo "-------> Installing Erlang/OTP $ver"
ln -s ${ERLROOT} /app/otp
${ERLROOT}/Install -minimal /app/otp

PATH=/app/otp/bin:$PATH
export PATH

cd $build

unset GIT_DIR

echo "-----> Building with Rebar"
./rebar get-deps compile compile-app 2>&1 | sed -u 's/^/       /'


if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo "-----> Build failed"
    exit 1
fi

if [ -f ${bpdir}/opt/otp.sh ]; then
    mkdir -p ${PROFILE}
    cp ${bpdir}/opt/otp.sh ${PROFILE}
fi

echo "-----> Build succeeded"
